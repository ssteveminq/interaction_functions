#!/usr/bin/env python
import roslib
import rospy
import actionlib
import controller_manager_msgs.srv
import control_msgs.msg
import trajectory_msgs.msg
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from sensor_msgs.msg import JointState
import roslib
import math
import sys
import rospy
import actionlib
import control_msgs.msg
import controller_manager_msgs.srv
import trajectory_msgs.msg
import geometry_msgs.msg
import controller_manager_msgs.srv
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray
from control_msgs.msg import JointTrajectoryControllerState
from std_msgs.msg import String
from std_msgs.msg import Int8
from std_msgs.msg import Float32
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseStamped


class Gaze_controller:
    def __init__(self, wait=0.0):
        # initialize action client
        # publisher for delvering command for base move
        self.headPub = rospy.Publisher('/hsrb/head_trajectory_controller/command', JointTrajectory, queue_size=1)
        rospy.Subscriber('desired_head_pan',Float32,self.cmd_cb)
        rospy.Subscriber('/hsrb/joint_states', JointState, self.states_cb)
        self.latest_positions=[]

    def states_cb(self,msg):
        positions = {}
        for name, i in zip(msg.name, range(len(msg.name))):
            positions[name] = msg.position[i]
        self.latest_positions = positions

    def listener(self,wait=0.0):
        # make sure the controller is running
        rospy.spin()            

        # fill ROS message
    def cmd_cb(self,msg):
        #clatest_positions
        cmd= msg.data
        # pan =1.0*cmd+self.latest_positions["head_pan_joint"]
        pan =cmd
        tilt= 0.1
        self.publish_head(pan,tilt)

    def publish_head(self,pan,tilt):
        jointTrajectory = JointTrajectory()
        jointTrajectory.joint_names = ["head_pan_joint", "head_tilt_joint"]

        point = JointTrajectoryPoint()
        point.positions = [pan, tilt]
        point.velocities = [0,0]
        point.time_from_start = rospy.Duration(0.5)

        jointTrajectory.points.append(point)
        self.headPub.publish(jointTrajectory)

if __name__ == '__main__':
    rospy.init_node('gazecontroller_test')
    gaze_manager = Gaze_controller()
    gaze_manager.listener()















































# rospy.init_node('test')

# # initialize action client
# cli = actionlib.SimpleActionClient('/hsrb/head_trajectory_controller/follow_joint_trajectory', control_msgs.msg.FollowJointTrajectoryAction)

# # wait for the action server to establish connection
# cli.wait_for_server()

# # make sure the controller is running
# rospy.wait_for_service('/hsrb/controller_manager/list_controllers')
# list_controllers = rospy.ServiceProxy('/hsrb/controller_manager/list_controllers', controller_manager_msgs.srv.ListControllers)
# running = False
# while running == False:
#     rospy.sleep(0.1)
#     for c in list_controllers().controller:
#         if c.name == 'head_trajectory_controller' and c.state == 'running':
#             running = True

# # fill ROS message
# goal = control_msgs.msg.FollowJointTrajectoryGoal()
# traj = trajectory_msgs.msg.JointTrajectory()
# traj.joint_names = ["head_pan_joint", "head_tilt_joint"]
# p = trajectory_msgs.msg.JointTrajectoryPoint()
# p.positions = [0.5, 0.5]
# p.velocities = [0, 0]
# p.time_from_start = rospy.Time(3)
# traj.points = [p]
# goal.trajectory = traj

# # send message to the action server
# cli.send_goal(goal)

# # wait for the action server to complete the order
# cli.wait_for_result()
